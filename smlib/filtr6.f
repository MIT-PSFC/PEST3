C******************** START FILE FILTR6.FOR ; GROUP FILTR6 *************
C===========================================================
C  FILTR6     DATA SMOOTHING ALGORITHM    D. MCCUNE  5 SEPT 78
C						PPPL
C
C
C     THIS IS AN ALGORITHM TO SMOOTH DATA.  INSTEAD OF
C   USING SPLINE FUNCTIONS, THE ALGORITHM USES A LOCAL
C   WEIGHTED AVERAGE TO GENERATE SMOOTHING ACTION.  THIS HAS
C   THE ADVANTAGE OF AVOIDING THE LARGE COEFFICENT ARRAYS
C   AND WORK SPACES NEEDED BY SPLINE FUNCTION AL
C   GORITHMS; AND IN MANY CASES (IN THE EXPERIENCE
C   OF THE AUTHOR) THE ALGORITHM IS MORE EFFICIENT IN CPU TIME
C   BY AS MUCH AS A FACTOR OF 10.
C
C     THE USER SPECIFIES THE RADIUS OF THE LOCAL WEIGHTED
C   AVERAGE ( CALLED 'DELTA' IN THIS ALGORITHM).  THIS DELTA
C   SHOULD BE SET AS SMALL AS POSSIBLE TO REMOVE 'NOISE' FROM
C   THE DATA SIGNAL, TO ASSURE MAXIMUM EFFICIENCY OF THE ALGOR
C   ITHM.  IF COMPONENTS OF THE SIGNAL OF WAVELENGTH
C   LAMDA OR LESS ARE DEEMED NOISE, DELTA SHOULD BE SET TO APPROX.
C   LAMDA/2.
C     ** note DELTA is an ARRAY ** of same dimension as the input
C   data; DELTA(j) specifies the smoothing delta at pt. j in the
C   input data.
C       IN THIS VERSION THE WEIGHTING FUNCTION IS TRIANGULAR
C   SHAPED, WITH BASE WIDTH TWO*DELTA, SYMMETRIC ABOUT
C   AND PEAKED AT THE POINT WHERE THE
C   LOCAL AVERAGE IS BEING COMPUTED.  THIS FUNCTION WAS
C   FOUND TO GENERATE ALMOST EQUIVALENT SMOOTHING ACTION
C   TO MORE COMPLICATED WEIGHTING FUNCTIONS, WITH A
C   CONSIDERABLE SAVINGS IN CPU TIME.
C   THE FORMULA FOR THE WEIGHTING FUNCTION IS:
C
C   W(X-T)=1./DELTA * (1.-ABS((X-T)/DELTA))
C        IF ABS(X-T) < DELTA,              OR
C   W(X-T)=0. IF ABS(X-T) >= DELTA.
C
C   THIS IS THE WEIGHTING FUNCTION CENTERED AT X.
C
C   THE ALGORITHM EVALUATES THE SMOOTHED DATA CURVE BY
C   COMPUTING THE LOCAL WEIGHTED AVERAGE ABOUT EACH POINT
C   USING THE WEIGHTING FUNCTION:
C
C             INTEGRAL(T=X(J)-DELTA TO X(J)+DELTA)[W(X(J)-T)*F(T)*DT]
C   YSM(J)=  ----------------------------------------------------
C             INTEGRAL(T=X(J)-DELTA TO X(J)+DELTA)[W(X(J)-T)*DT]
C
C   WHERE F(T) IS THE LINEARLY INTERPOLATED (CONTINUOUS, PIECE-
C   WISE LINEAR) FUNCTION OF THE ORIGINAL DATA (X(1),Y(1)) THRU
C   (X(N),Y(N))
C
C
C *******EPSLON FEATURE *********
C
C   IN MANY APPLICATIONS, WE MAY KNOW NOT ONLY THE FREQUENCY
C  OF 'NOISE' IN A SIGNAL, BUT ALSO ITS NOMINAL AMPLITUDE.
C    THEREFORE IT IS DESIRABLE THAT THE ALGORITHM NOT SMOOTH
C    OUT COMPONENTS OF THE SIGNAL WHICH ARE OF AMPLITUDE
C    GREATER THAN THIS NOMINAL AMPLITUDE, EVEN IF
C    THE CORRESPONDING FREQUENCY IS VERY HIGH.  TO THIS END
C    AN 'EPSILON' FEATURE IS PROVIDED IN THIS ALGORITHM.
C      THE USER SPECIFIES A VALLUE EPSLON WHICH SAYS
C    TO THE ALGORITHM, NO POINT SHALL BE MOVED MORE THAN
C    EPSLON FROM THE POINTS  IN THE ORIGINAL DATA.  THIS FEATURE
C    IS VERY USEFUL IF THE CURVE BEING SMOOTHED HAS A 'REAL'
C    FEATURE, TO BE PRESERVED, WHICH IS VERY SHARP OR NARROW, OR
C    WHICH INVOLVES A VERY RAPID RISE OR FALL TIME.
C
C    THE ALGORITHM, AFTER EVALUATING A SMOOTHED DATA CURVE
C    BY THE ABOVE FORMULA, COMPARES THE RESULT WITH THE ORIGINAL
C    DATA. IF AT ANY POINT THE ORDINATE VALUES HAVE CHANGED BY
C    MORE THAN EPSLON, THE SMOOTHED CURVE IN THE VICINITY OF THAT
C    POINT IS REEVALUATED USING A SMALLER, PROGRAM DEFINED
C    DELTA.  THE PROCEDURE IS REPEATED UNTIL THERE ARE NO
C    'EPSLON VIOLATIONS' IN THE SMOOTHED CURVE.
C
C  THE EPSLON VALUES MAY BE PASSED AS AN ARRAY OF DIMENSION
C  NE <= N=DIMENSION OF DATA ARRAYS; TO SPECIFY AN EPSLON
C  'ERROR BAR' FOR EACH POINT INDIVIDUALLY, SPECIFY NE=N;
C  TO USE THE SAME 'ERROR BAR ' FOR ALL POINTS SPECIFY NE=1;
C  IF 1 < NE < N, THE ERROR BAR FOR DATA POINTS J=1 THRU NE
C  IS EPS(J), FOR DATA POINTS J=NE+1 THRU N, THE ERROR BAR
C  IS THE LAST EPSLON, EPS(NE).
C
C  THE WEIGHTED AVERAGE WIDTH DELTA IS ALSO PASSED AS
C  AN ARRAY WHICH MAY CONTAIN DIFFERENT VALUES FOR
C  FOR DIFFERENT DATA POINTS.  HOWEVER,
C  THE USER **MUST** REDEFINE THE DELTA ARRAY BEFORE EACH
C  CALL TO FILTR6, SINCE THE ARRAY MAY BE
C  MODIFIED DURING IMPLIMENTATION OF THE EPSLON FEATURE*****
C
C
C    *** END CONDITIONS ****
C
C  END CONDITION PARAMETERS XENDA (LEFT SIDE) AND XENDB (RIGHT SIDE)
C  MAY BE SET ANYWHERE BETWEEN THE EXTREMES (0 AND 1):
C    XEND_=0:  THE END-POINT IS EFFECTIVELY FIXED
C         (YSM(1) WILL EQUAL Y(1)).  THE WEIGHTED AVERAGE
C         INTEGRAL IN THE VICINITY OF THE ENDPOINT IS CALCULATED
C         BY 'CONTINUING' THE DATA BEYOND THE END-POINT BY
C         REFLECTION ABOUT THE ENDPOINT (E.G. IF (0,0) IS THE
C         ENDPOINT AND (1,1) IS THE NEXT POINT, (-1,-1) IS THE
C         REFLECTED POINT.
C   XEND_ =1:  THE FIRST DERIVATIVE AT THE ENDPOINT IS EFFECTIVELY
C        SET TO ZERO.  THE WEIGHTED AVERAGE IN THE VICINITY
C        OF THE ENDPOINT IS CALCULATED BY 'EXTENDING' THE DATA
C        BEYOND THE ENDPOINT BY REFLECTION ABOUT THE LINE
C        X=CONST. PASSING THRU THE ENDPOINT. (E.G. IF THE END
C        POINT IS (0,0) AND THE NEXT POINT (1,1) THE REFL
C        ECTED POINT IS (-1,1)  ).  THE ENDPOINT WILL BE MOVED
C        BUT BY SYMMETRY OF THE REFLECTION THE SLOPE
C        OF THE SMOOTHED DATA CURVE WILL GO TO ZERO.
C
C   EPSLN2  FEATURE... AN ARRAY OF MULTIPLIERS OF THE ORIGINAL
C        ERROR BARS MAY BE SUPPLIED BY THE USER FOR USE WHEN
C        THE NUMBER OF POINTS INVOLVED IN A VIOLATION IS
C        SMALL.
C
C   ALSO, THE USER MAY USE A DATA 'DROPOUT' FEATURE:
C    (SEE BELOW)
C
C
C    A BASELINE FEATURE IS ALSO AVAILABLE (SEE BELOW)
C
C---------------------------------------------------
C  ARGUMENTS           FILTR6
C
C    X()     INPUT    DATA ABSCISSAE (ORDERED S.T. X(I+1) > X(I))
C    Y1()    INPUT    ORIGINAL DATA ORDINATES *MAY BE MODIFIED
C					BY DATA DROPOUT
C    Y()     OUTPUT   SMOOTHED DATA ORDINATES
C		      (NOTE Y AND Y1 MUST BE DISTINCT ARRAYS
C                     FOR PROPER IMPLEMENTATION OF EPSLON FEATURE)
C    N       INPUT    # OF DATA PTS (DIMENSION OF X,Y1,Y)
C    EPS()   INPUT    'EPSLON' DISCUSSED ABOVE.  (EXCEPT FOR EPS2
C                     FEATURE) NO POINT SHALL BE MOVED MORE THAN
C                     EPS, I.E [ABS(Y1(J)-Y(J)) <= EPS] ALL J.
C                            EPS IN DATA ORDINATE UNITS.
C                     *EPS IS AN ARRAY*
C    NE      INPUT    DIMENSION OF EPS
C    EPS2()  INPUT    'EPSLN2' FEATURE DISCUSSED ABOVE.
C                     MULTIPLIER FOR EPSLON ARRAY FOR SHORT VIOLATIONS
C
C    NEPS2   INPUT    DIMENSION OF EPS2.:
C                        NEPS2=0==> EPSLON FEATURE STRICTLY
C				    IMPLEMENTED
C     			 NEPS2=1==> IF AN ISOLATED VIOLATION OF
C				    EPS INVOLVING ONLY ONE DATA
C   				    PT IS DETECTED, EPS2(1)*EPS
C				    IS USED INSTEAD OF EPS
C                        NEPS2=2==> EPSLON VIOLATION OF LENGTH 1,
C                                   EPS2(1)*EPS USED INSTEAD OF EPS;
C				     VIOLATION OF LENGTH 2 DATA
C				    PTS, EPS2(2)*EPS USED INSTEAD OF EPS
C			 NEPS2 CAN BE ANY NONNEG. INTEGER.
C   DELT() INPUT         'DELTA', RADIUS OF WEIGHTED AVERAGE,
C			 DISCUSSED ABOVE.  **array of size N**
C   IDDF   INPUT	DATA DROPOUT FLAG:
C			=0: DONT USE DATA DROPOUT FEATURE
C			=1: DO USE FEATURE
C   DDV    INPUT	DATA DROPOUT CRITERION: (IF IDDF=1):
C			DATA PT. (X(I),Y1(I)) DROPS OUT IF Y1(I)
C			IS MORE THAN DDV ABOVE OR BELOW THE LINE
C			SEGMENT CONNECTING ITS IMMEDIATE NEIGHBORS
C			Y1(I) IS THEN RESET TO LIE ON SAID LINE
C			SEGMENT.
C    IBLF   INPUT    BASELINE FEATURE FLAG:
C			=0==> DONT PUT IN A BASELINE
C			=1==> DO PUT IN A BASELINE
C
C    BLV    INPUT    BASELINE VALUE (IF IBLF=1):  ALL POINTS IN
C			THE CURVE FOUND TO BE LESS THAN BLV
C			ARE RESET TO EQUAL BLV.
C
C     SM     OUTPUT SUM SQUARED OF (Y1(I)-Y(I)), EXCLUDING
C                   POINTS AT THE BASELINE (IF ANY).
C    *** MODIFIED *** SM= SUM SQUARED OF (Y1(J)-Y(J))
C           DIVIDED BY (MAX[J]ABS(Y1(J)))**2
C           NORMALIZATION TO PREVENT OVERFLOWS
C
C     NDROP  OUTPUT NUMBER OF 'DROPOUT' PTS.
C     NBLRS  OUTPUT NUMBER OF PTS RESET TO THE BASELINE.
C
C-----------------------------------------------------------------------
C
      SUBROUTINE FILTR6(X,Y1,Y,N,EPS,NE,EPS2,NEPS2,DELT,IDDF,DDV,
     1                 IBLF,BLV,XENDA,XENDB,SM,NDROP,NBLRS)
C
      DIMENSION X(N),Y1(N),Y(N),EPS2(1)  !EPS2 IS AN ARRAY
      DIMENSION EPS(NE),DELT(N)
C
C  START OF EXECUTABLE CODE
C
      NBLRS=0
      NDROP=0
C  DROP DATA PTS IN Y1 ARRAY
      IF(IDDF.EQ.1) CALL DDROP(X,Y1,N,DDV,NDROP)
C
      IERR=0
      ZXP=X(1)-(X(2)-X(1))
      DO 10 J=1,N
        IF(ZXP.GE.X(J)) IERR=J   ! CHECKING MONOTONICITY
        ZXP=X(J)
        Y(J)=Y1(J)
 10   CONTINUE
C
      IF(IERR.NE.0) THEN
        IERR=MAX(2,IERR)
        IERR1=IERR-1
        WRITE(6,1001) IERR1,X(IERR1),IERR,X(IERR)
        SM=0.0
        RETURN
      ENDIF
 1001 FORMAT(
     >' ?FILTR6:  INPUT "X" ARRAY NOT MONOTONIC, CANNOT SMOOTH:'/
     >'  X(',I6,')=',1PE13.6,'  X(',I6,')=',1PE13.6/)
C
C  SMOOTH ENTIRE REGION IF BASELINE FEATURE NOT IN EFFECT.
C
      IF(IBLF.EQ.1) GO TO 15
C
      XEND1=XENDA
      XEND2=XENDB
      CALL FILTER(X,Y1,Y,N,DELT,XEND1,XEND2)
CT	CALL GRFADH(X,Y,Y,N,-11,0,
CT     >    30HSMOOTHED FUNCTION             ,
CT     >    30HTIME, SECONDS                 ,
CT     >    10HFILTR6.FOR,1,30HWITHOUT ERROR BAR CORRECTION       )
C
C  IMPLEMENT EPSLON FEATURE --
      CALL FILEPS(X,Y1,Y,N,DELT,EPS,NE,EPS2,NEPS2,XEND1,XEND2)
C
      GO TO 500
C
C  RESET PTS IF BASELINE FEATURE IS IN EFFECT
C
 15   DO 20 J=1,N
        IF(Y(J).GT.(BLV)) GO TO 20
        NBLRS=NBLRS+1
        Y(J)=BLV
 20   CONTINUE
C
C  SMOOTH BETWEEN PTS RESET TO BASELINE.
C
      J=0
 30   J=J+1
      IF(J.GE.N) GO TO 500
      IF(Y(J).LE.BLV) GO TO 30
      IF(J.GT.1) J=J-1
C  SMOOTHING WILL BE BETWEEN INDICES J AND J2
C
      J2=J
 40   J2=J2+1
      IF((Y(J2).GT.BLV).AND.(J2.LT.N)) GO TO 40
C
C  DMC MAY 1985 - MODIFYING SMALL INTERVAL HANDLING
C
C  IF REGION ABOUT TO BE SMOOTHED IS OF WIDTH LESS THAN DELT,
C  AND CONTAINS NO PTS MORE THAN EPS ABOVE THE BASE LINE,
C  RESET THE WHOLE REGION TO THE BASELINE RATHER THAN SMOOTHING.
C
CX	IF((X(J2)-X(J)).GT.AMIN1(DELT(J),DELT(J2))) GO TO 45
CX	DO 42 I=J,J2
CX	ZEPS=EPS(NE)
CX	IF(I.LT.NE) ZEPS=EPS(I)
CX	IF(Y(I).GT.(BLV+ZEPS)) GO TO 45
CX 42	CONTINUE
CXC  ZERO OUT THE REGION
CX	DO 43 I=J,J2
CX 43	Y(I)=BLV
CX	GO TO 50
C
 45   N2=J2-J+1
C  SMOOTH IF THERE ARE ENUF DATA PTS.
      IF(N2.LT.2) THEN
        ZEPS=EPS(NE)
        IF(J.LT.NE) ZEPS=EPS(J)
        IF(Y(J).GT.(BLV+ZEPS)) Y(J)=BLV
        GO TO 50
      ENDIF
C
      Y1A=Y1(J)
      Y1B=Y1(J2)
      IF(Y1(J).LT.BLV) Y1(J)=BLV
      IF(Y1(J2).LT.BLV) Y1(J2)=BLV
      XEND1=0.0
      XEND2=0.0
      IF(J.EQ.1) XEND1=XENDA
      IF(J2.EQ.N) XEND2=XENDB
CTES	CALL DATCPU(ZTIM1)
      CALL FILTER(X(J),Y1(J),Y(J),N2,DELT(J),XEND1,XEND2)
CTES	CALL DATCPU(ZTIM2)
CTES	ZTIM=ZTIM2-ZTIM1
CTES	TYPE 8901,ZTIM
CTES 8901	FORMAT(' SMOOTHING INIT TIME=',1PE10.3,' SECONDS')
CT	CALL GRFADH(X,Y,Y,N,-11,0,
CT     >    30HSMOOTHED FUNCTION             ,
CT     >    30HTIME, SECONDS                 ,
CT     >    10HFILTR6.FOR,1,30HWITHOUT ERROR BAR CORRECTION       )
C
C  IMPLEMENT EPSLON FEATURE --
      JE=J
      IF(JE.GT.NE) JE=NE
      NEL=NE-JE+1
C
CT	TYPE 9902,J,J2
CT 9902	FORMAT(' FILEPS   J,J2:',2X,I4,2X,I4)
      CALL FILEPS(X(J),Y1(J),Y(J),N2,DELT(J),EPS(JE),NEL,
     >              EPS2,NEPS2,XEND1,XEND2)
CT	CALL GRFADH(X,Y,Y,N,-11,0,
CT     >    30HSMOOTHED FUNCTION             ,
CT    >    30HTIME, SECONDS                 ,
CT     >    10HFILTR6.FOR,1,30HWITH ERROR BAR CORRECTION          )
      Y1(J)=Y1A
      Y1(J2)=Y1B
C
C
 50   J=J2
      GO TO 30
C
C  ***EXIT FROM LOOP.  COMPUTE SM
C
 500  CONTINUE
      SM=0.
C  D. MC CUNE JUNE 1980-- PREVENT OVERFLOW ON CALCULTION OF
C  SM
C     SM NORMALIZED BY 1/(MAX(ABS(Y1(J)))**2
C
      ZMAX=0.0
      DO 505 J=1,N
      ZMAX=AMAX1(ZMAX,ABS(Y1(J)))
 505  CONTINUE
      IF(ZMAX.EQ.0.0) ZMAX=1.0
C
      DO 510 J=1,N
      DY=(Y(J)-Y1(J))/ZMAX
      IF((IBLF.EQ.0).OR.(Y(J).GT.BLV)) SM=SM+DY*DY
 510  CONTINUE
      RETURN
      	END
C******************** END FILE FILTR6.FOR ; GROUP FILTR6 ***************
